{"version":3,"sources":["logo.svg","components/NavBar.js","components/Header.js","components/Project.js","components/Footer.js","App.js","serviceWorker.js","index.js","components/prueba.png"],"names":["module","exports","CustomNavBar","Navbar","color","light","expand","src","logo","className","alt","NavbarBrand","href","Collapse","navbar","Nav","NavLink","Header","Project","props","proyectoActual","proyecto","left","contador","right","Row","style","backgroundColor","Col","xs","size","lg","order","offset","Container","titulo","marginLeft","tecnologias","map","item","index","descripcion","Button","onClick","window","location","github","imagenes","maxWidth","maxHeight","Footer","PRELLO","require","CHAT","Pentamino","PENTAMINO","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,0NCkBpC,SAASC,IACZ,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MAC/B,yBAAKC,IAAKC,IAAMC,UAAU,WAAWC,IAAI,SACzC,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,iBACA,kBAACC,EAAA,EAAD,CAAUC,QAAM,GACZ,kBAACC,EAAA,EAAD,CAAKN,UAAU,UAAUK,QAAM,IAE/B,kBAACE,EAAA,EAAD,CAASJ,KAAK,gBAAd,UACA,kBAACI,EAAA,EAAD,CAASJ,KAAK,gBAAd,aC1Bb,SAASK,IACZ,OACI,yBAAKR,UAAU,cACX,sC,oCCFCS,EAAU,SAACC,GAEpB,IAAMC,EAAiBD,EAAME,SACvBC,EAAOH,EAAMI,SAAW,EACxBC,GAASL,EAAMI,SAAW,GAAK,EAErC,OACI,6BACI,kBAACE,EAAA,EAAD,CAAKhB,UAAU,aAAaiB,MAAO,CAAEC,gBAAiBL,EAAO,UAAY,YACrE,kBAACM,EAAA,EAAD,CAAKC,GAAI,CAACC,KAAM,IAAKC,GAAI,CAAED,KAAM,EAAGE,MAAOV,EAAKW,OAAO,GAAKxB,UAAU,cAC9D,kBAACyB,EAAA,EAAD,KACI,4BAAKd,EAAee,QACpB,kBAACV,EAAA,EAAD,CAAKC,MAAO,CAACU,WAAW,IACnBhB,EAAeiB,YAAYC,KAAI,SAACC,EAAMC,GAAP,OAC5B,kBAACZ,EAAA,EAAD,CAAKC,GAAI,CAACC,KAAK,QAASrB,UAAU,cAC9B,4BAAK8B,QAIjB,2BAAInB,EAAeqB,aACnB,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMC,OAAOC,SAASjC,KAAMQ,EAAe0B,QAAS1C,MAAM,WAA3E,oBAGR,kBAACwB,EAAA,EAAD,CAAKC,GAAI,CAACC,KAAM,IAAKC,GAAI,CAAED,KAAM,EAAGE,MAAOR,GAASf,UAAU,cAC1D,kBAACyB,EAAA,EAAD,KACI,yBAAK3B,IAAKa,EAAe2B,SAAUrB,MAAO,CAAEsB,SAAS,OAAQC,UAAU,eC1B5F,SAASC,IACZ,OACI,6BACI,sC,0BCKNC,EAAS,CACbhB,OAAQ,SACRM,YAAa,6DACbM,SAAUK,EAAQ,GAClBf,YAAa,CAAC,SAAU,QAAS,SAAU,QAAS,SACpDS,OAAQ,sCAGJO,EAAO,CACXlB,OAAQ,kBACRM,YAAa,uDACbM,SAAUO,IACVjB,YAAa,CAAC,aAAc,OAAQ,SACpCS,OAAQ,6CAGJS,EAAY,CAChBpB,OAAQ,mBACRM,YAAa,gDACbM,SAAUO,IACVjB,YAAa,CAAC,eAAgB,QAAS,gBACvCS,OAAQ,yCAgBKU,MAbf,WACE,OACE,6BACE,kBAACtD,EAAD,MACA,kBAACe,EAAD,MACA,kBAAC,EAAD,CAASI,SAAU8B,EAAQ5B,SAAU,IACrC,kBAAC,EAAD,CAASF,SAAUgC,EAAM9B,SAAU,IACnC,kBAAC,EAAD,CAASF,SAAUkC,EAAWhC,SAAU,IACxC,kBAAC2B,EAAD,Q,MC9BcO,QACW,cAA7Bb,OAAOC,SAASa,UAEe,UAA7Bd,OAAOC,SAASa,UAEhBd,OAAOC,SAASa,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5B1E,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.a8b36e25.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react'\r\nimport logo from '../logo.svg';\r\n\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    NavbarText\r\n} from 'reactstrap';\r\n\r\nexport function CustomNavBar() {\r\n    return (\r\n        <div>\r\n            <Navbar color=\"light\" light expand=\"md\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                <NavbarBrand href=\"/\">Nicolas Gomez</NavbarBrand>\r\n                <Collapse navbar>\r\n                    <Nav className=\"mr-auto\" navbar>\r\n                    </Nav>\r\n                    <NavLink href=\"/components/\">Github</NavLink>\r\n                    <NavLink href=\"/components/\">Resume</NavLink>\r\n                </Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\n\r\nexport function Header() {\r\n    return (\r\n        <div className=\"App-header\">\r\n            <p>Hello!</p>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Container, Row, Col, Button } from 'reactstrap'\r\n\r\nexport const Project = (props) => {\r\n\r\n    const proyectoActual = props.proyecto\r\n    const left = props.contador % 2 \r\n    const right = (props.contador + 1) % 2\r\n\r\n    return (\r\n        <div>\r\n            <Row className='projectRow' style={{ backgroundColor: left ? '#eff5ff' : '#c2d8fd' }}>\r\n                <Col xs={{size: 12}} lg={{ size: 5, order: left,offset:1 }} className='projectCol'>\r\n                        <Container>\r\n                            <h2>{proyectoActual.titulo}</h2>\r\n                            <Row style={{marginLeft:1}}>\r\n                                {proyectoActual.tecnologias.map((item, index) =>\r\n                                    <Col xs={{size:'auto'}} className=\"tecnologia\" >\r\n                                        <h7>{item}</h7>\r\n                                    </Col>\r\n                                )}\r\n                            </Row>\r\n                            <p>{proyectoActual.descripcion}</p>\r\n                            <Button onClick={() => window.location.href= proyectoActual.github } color=\"primary\">View on Github</Button>\r\n                        </Container>\r\n                    </Col>\r\n                    <Col xs={{size: 12}} lg={{ size: 5, order: right }} className='projectCol'>\r\n                        <Container>\r\n                            <img src={proyectoActual.imagenes} style={{ maxWidth:'100%', maxHeight:'100%'}}/>\r\n                        </Container>\r\n                    </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport function Footer() {\r\n    return (\r\n        <div>\r\n            <p>Footer</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport { CustomNavBar } from './components/NavBar'\nimport { Header } from './components/Header'\nimport { Project } from './components/Project'\nimport { Footer } from './components/Footer'\n\nimport './App.css';\n\nimport Pentamino from './components/prueba.png'\n\nconst PRELLO = {\n  titulo: \"PRELLO\",\n  descripcion: \"Aplicacion de administracion de proyectos con interfaz web\",\n  imagenes: require('./components/prueba.png'),\n  tecnologias: [\"Python\", \"React\", \"Docker\", \"Redis\", \"Mysql\"],\n  github: \"https://github.com/Nico9813/Prello\"\n}\n\nconst CHAT = {\n  titulo: \"SIMPLE WEB CHAT\",\n  descripcion: \"Chat y documento colaborativo entre varias personas \",\n  imagenes: Pentamino,\n  tecnologias: [\"WebSockets\", \"Node\", \"React\"],\n  github: \"https://github.com/Nico9813/Sala_chat.git\"\n}\n\nconst PENTAMINO = {\n  titulo: \"PENTAMINO MOBILE\",\n  descripcion: \"Adaptacion mobile del juego de mesa PENTAMINO\",\n  imagenes: Pentamino,\n  tecnologias: [\"React-native\", \"Redux\", \"PanResponder\"],\n  github: \"https://github.com/Nico9813/Pentamino\"\n}\n\nfunction App() {\n  return (\n    <div>\n      <CustomNavBar></CustomNavBar>\n      <Header></Header>\n      <Project proyecto={PRELLO} contador={0}></Project>\n      <Project proyecto={CHAT} contador={1}></Project>\n      <Project proyecto={PENTAMINO} contador={2}></Project>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n\n/*\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/prueba.283e46bf.png\";"],"sourceRoot":""}