{"version":3,"sources":["logo.svg","components/NavBar.js","components/Header.js","components/Carrusel.js","components/Project.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CustomNavBar","style","backgroundColor","Navbar","ficolor","light","expand","NavbarBrand","href","Perfil","Nav","className","navbar","NavLink","Header","props","display","alignItems","justifyContent","flex","src","process","foto","alt","borderRadius","marginLeft","height","width","fontSize","about","Carrusel","useState","activeIndex","setActiveIndex","animating","setAnimating","next","nextIndex","imagenes","length","previous","slides","map","item","index","CarouselItem","onExiting","onExited","key","Carousel","CarouselIndicators","items","onClickHandler","newIndex","CarouselControl","direction","directionText","Project","proyectoActual","proyecto","left","contador","right","Row","Col","xs","size","lg","order","offset","Container","titulo","tecnologias","descripcion","Button","onClick","window","location","github","color","Footer","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ac8244d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport logo from '../logo.svg';\r\n\r\nimport * as Perfil from '../perfil.json'\r\n\r\nimport {\r\n    Navbar,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavLink\r\n} from 'reactstrap';\r\n\r\nexport const CustomNavBar = () => {\r\n    return (\r\n        <div style={{ backgroundColor: '#f5f5f5' }}>\r\n            <Navbar ficolor=\"nigth\" light expand=\"md\">\r\n                <NavbarBrand href=\"/\">{Perfil.nombre}</NavbarBrand>\r\n                <Nav className=\"mr-auto\" navbar>\r\n                </Nav>\r\n                \r\n                <NavLink href={Perfil.github}>Github</NavLink>\r\n                <NavLink href={Perfil.cv}>Resume</NavLink>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\n\r\nexport const Header = (props) => {\r\n    return (\r\n        <div className=\"App-header\">\r\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent:'center'}}>\r\n                <div style={{flex: 2}}>\r\n                    <img src={process.env.PUBLIC_URL + props.foto} alt=\"logo\" style={{ borderRadius: 50, marginLeft:70 }} height={130} width={130} />\r\n                </div>\r\n                <div style={{ flex: 10}} className='header_container'>\r\n                    <p style={{fontSize: 20}}>{props.about}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport {\r\n    Carousel,\r\n    CarouselItem,\r\n    CarouselControl,\r\n    CarouselIndicators\r\n} from 'reactstrap';\r\n\r\nexport const Carrusel = (props) => {\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [animating, setAnimating] = useState(false);\r\n\r\n    const next = () => {\r\n        if (animating) return;\r\n        const nextIndex = activeIndex === props.imagenes.length - 1 ? 0 : activeIndex + 1;\r\n        setActiveIndex(nextIndex);\r\n    }\r\n\r\n    const previous = () => {\r\n        if (animating) return;\r\n        const nextIndex = activeIndex === 0 ? props.imagenes.length - 1 : activeIndex - 1;\r\n        setActiveIndex(nextIndex);\r\n    }\r\n\r\n    const goToIndex = (newIndex) => {\r\n        if (animating) return;\r\n        setActiveIndex(newIndex);\r\n    }\r\n\r\n    const slides = props.imagenes.map((item, index) => {\r\n        return (\r\n            <CarouselItem\r\n                onExiting={() => setAnimating(true)}\r\n                onExited={() => setAnimating(false)}\r\n                key={index}\r\n            >\r\n                <img className='imagen_container' src={process.env.PUBLIC_URL + `${item}`} height={'100%'} width={'100%'}/>\r\n            </CarouselItem>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <Carousel\r\n            activeIndex={activeIndex}\r\n            next={next}\r\n            previous={previous}\r\n        >\r\n            <CarouselIndicators items={props.imagenes} activeIndex={activeIndex} onClickHandler={goToIndex} />\r\n            {slides}\r\n            <CarouselControl direction=\"prev\" directionText=\"Previous\" onClickHandler={previous} />\r\n            <CarouselControl direction=\"next\" directionText=\"Next\" onClickHandler={next} />\r\n        </Carousel>\r\n    );\r\n}\r\n\r\nexport default Carrusel;","import React from 'react'\r\nimport { Container, Row, Col, Button } from 'reactstrap'\r\nimport Carrusel from './Carrusel'\r\n\r\nexport const Project = (props) => {\r\n\r\n    const proyectoActual = props.proyecto\r\n    const left = props.contador % 2 \r\n    const right = (props.contador + 1) % 2\r\n\r\n    return (\r\n        <div>\r\n            <Row className='projectRow' style={{ backgroundColor: left ? '#eff5ff' : '#c2d8fd' }}>\r\n                <Col xs={{size: 12}} lg={{ size: 3, order: left,offset:1 }} className='projectCol'>\r\n                        <Container>\r\n                            <h2>{proyectoActual.titulo}</h2>\r\n                            <Row style={{marginLeft:1}}>\r\n                                {proyectoActual.tecnologias.map((item, index) =>\r\n                                    <Col xs={{size:'auto'}} className=\"tecnologia\" >\r\n                                        <h7>{item}</h7>\r\n                                    </Col>\r\n                                )}\r\n                            </Row>\r\n                            <p>{proyectoActual.descripcion}</p>\r\n                            <Button onClick={() => window.location.href= proyectoActual.github } color=\"primary\">View on Github</Button>\r\n                        </Container>\r\n                    </Col>\r\n                    <Col xs={{size: 12}} lg={{ size: 7, order: right }} className='projectCol'>\r\n                        <Container>\r\n                            <Carrusel imagenes={proyectoActual.imagenes}/>\r\n                        </Container>\r\n                    </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Container } from 'reactstrap'\r\n\r\nexport function Footer() {\r\n    return (\r\n        <div className=\"footer\">\r\n            <Container>\r\n                \r\n            </Container>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport { CustomNavBar } from './components/NavBar'\nimport { Header } from './components/Header'\nimport { Project } from './components/Project'\nimport { Footer } from './components/Footer'\n\nimport './App.css';\n\nimport * as Perfil from './perfil.json'\n\nfunction App() {\n  return (\n    <div>\n      <CustomNavBar></CustomNavBar>\n      <Header foto={Perfil.foto} about={Perfil.about}></Header>\n      {Perfil.proyectos.map( (proyecto, index) => {\n        return(\n          <Project proyecto={proyecto} contador={index}></Project>\n        )\n      })}\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}