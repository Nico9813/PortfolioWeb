{"version":3,"sources":["components/NavBar.js","components/Carrusel.js","components/Project.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["CustomNavBar","foto","Navbar","className","ficolor","light","expand","NavbarBrand","href","src","process","alt","Perfil","Nav","navbar","NavLink","target","Carrusel","props","useState","activeIndex","setActiveIndex","animating","setAnimating","next","nextIndex","imagenes","length","previous","slides","map","item","index","CarouselItem","onExiting","onExited","key","height","width","Carousel","CarouselIndicators","items","onClickHandler","newIndex","CarouselControl","direction","directionText","Project","proyecto","contador","titulo","anio","descripcion","tecnologias","views","downloads","left","right","style","backgroundColor","Row","Col","xs","size","lg","order","offset","Container","marginBottom","marginLeft","Object","keys","Button","margin","color","download","Footer","document","title","App","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4db4298d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport * as Perfil from '../perfil.json'\r\n\r\nimport {\r\n    Navbar,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavLink\r\n} from 'reactstrap';\r\n\r\nexport const CustomNavBar = ({foto}) => {\r\n    return (\r\n        <Navbar className=\"nav-bar\" ficolor=\"nigth\" light expand=\"md\">\r\n            <NavbarBrand href=\"/\">\r\n                <div className=\"brand\">\r\n                    <img className=\"perfil\" src={process.env.PUBLIC_URL + foto} alt=\"logo\" />\r\n                    <h4 className=\"titulo\">\r\n                        {Perfil.nombre}\r\n                    </h4>\r\n                </div>\r\n            </NavbarBrand>\r\n            <Nav className=\"mr-auto\" navbar>\r\n            </Nav>\r\n                \r\n            <NavLink href={Perfil.github}>Github</NavLink>\r\n            <NavLink href={process.env.PUBLIC_URL + Perfil.cv} target=\"_blank\">CV</NavLink>\r\n        </Navbar>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport {\r\n    Carousel,\r\n    CarouselItem,\r\n    CarouselControl,\r\n    CarouselIndicators\r\n} from 'reactstrap';\r\n\r\nexport const Carrusel = (props) => {\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [animating, setAnimating] = useState(false);\r\n\r\n    const next = () => {\r\n        if (animating) return;\r\n        const nextIndex = activeIndex === props.imagenes.length - 1 ? 0 : activeIndex + 1;\r\n        setActiveIndex(nextIndex);\r\n    }\r\n\r\n    const previous = () => {\r\n        if (animating) return;\r\n        const nextIndex = activeIndex === 0 ? props.imagenes.length - 1 : activeIndex - 1;\r\n        setActiveIndex(nextIndex);\r\n    }\r\n\r\n    const goToIndex = (newIndex) => {\r\n        if (animating) return;\r\n        setActiveIndex(newIndex);\r\n    }\r\n\r\n    const slides = props.imagenes.map((item, index) => {\r\n        return (\r\n            <CarouselItem\r\n                onExiting={() => setAnimating(true)}\r\n                onExited={() => setAnimating(false)}\r\n                key={index}\r\n            >\r\n                <img className='imagen_container' src={process.env.PUBLIC_URL + `${item}`} height={'100%'} width={'100%'}/>\r\n            </CarouselItem>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <Carousel\r\n            activeIndex={activeIndex}\r\n            next={next}\r\n            previous={previous}\r\n        >\r\n            <CarouselIndicators items={props.imagenes} activeIndex={activeIndex} onClickHandler={goToIndex} />\r\n            {slides}\r\n            <CarouselControl direction=\"prev\" directionText=\"Previous\" onClickHandler={previous} />\r\n            <CarouselControl direction=\"next\" directionText=\"Next\" onClickHandler={next} />\r\n        </Carousel>\r\n    );\r\n}\r\n\r\nexport default Carrusel;","import React from 'react'\r\nimport { Container, Row, Col, Button } from 'reactstrap'\r\nimport Carrusel from './Carrusel'\r\n\r\nexport const Project = (props) => {\r\n\r\n    const { proyecto, contador } = props\r\n    const { titulo, anio, descripcion, tecnologias, views, downloads } = proyecto\r\n    const left = contador % 2 \r\n    const right = (contador + 1) % 2\r\n\r\n    return (\r\n        <div className='projectRow' style={{ backgroundColor: left ? 'white' : '#7abfff' }}>\r\n            <Row className='project'>\r\n                <Col xs={{size: 12}} lg={{ size: 3, order: left,offset:1 }} className='projectCol'>\r\n                        <Container>\r\n                            <h2>{titulo}</h2>\r\n                            <h6>{anio}</h6>\r\n                            <Row style={{ marginBottom: 8, marginLeft: 0}}>\r\n                                {tecnologias.map((item) =>\r\n                                    <Col xs={{ size: 'auto' }} className=\"tecnologia\" style={{ backgroundColor: 'black' }}>\r\n                                        <h7>{item}</h7>\r\n                                    </Col>\r\n                                )}\r\n                            </Row>\r\n                            <div>\r\n                                <p>{descripcion}</p>\r\n                            </div>\r\n                            <Row style={{ marginLeft: -2 }}>\r\n                                {views &&\r\n                                    Object.keys(views).map( key => \r\n                                        <a href={process.env.PUBLIC_URL + views[key]} target=\"_blank\"><Button style={{ margin: \"3px\" }} color=\"primary\">Ver {key}</Button></a>\r\n                                    )\r\n                                }\r\n                                {downloads && \r\n                                    Object.keys(downloads).map( key => \r\n                                        <a href={process.env.PUBLIC_URL + downloads[key]} download><Button style={{ margin: \"3px\" }} color=\"success\">Descargar {key}</Button></a>\r\n                                    )\r\n                                }\r\n                            </Row>\r\n                        </Container>\r\n                    </Col>\r\n                    <Col xs={{size: 12}} lg={{ size: 7, order: right }} className='projectCol'>\r\n                        <Container>\r\n                            <Carrusel imagenes={proyecto.imagenes}/>\r\n                        </Container>\r\n                    </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport function Footer() {\r\n    return (\r\n        <div className=\"footer\">\r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { CustomNavBar } from './components/NavBar'\r\nimport { Container, Row, Col, Button } from 'reactstrap'\r\nimport { Header } from './components/Header'\r\nimport { Project } from './components/Project'\r\nimport { Footer } from './components/Footer'\r\n\r\nimport './App.css';\r\n\r\nimport * as Perfil from './perfil.json'\r\n\r\ndocument.title = \"Nicolas Gomez | Portfolio\"\r\n\r\nfunction App() {\r\n  return (\r\n      <div class=\"App\">\r\n        <CustomNavBar foto={Perfil.foto}></CustomNavBar>\r\n        {Perfil.proyectos.map((proyecto, index) => {\r\n          return (\r\n            <Project proyecto={proyecto} contador={index}></Project>\r\n          )\r\n        })}\r\n        <Footer></Footer>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}